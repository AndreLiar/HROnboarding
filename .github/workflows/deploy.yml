name: Deploy HR Onboarding Application

permissions:
  contents: read
  actions: write

on:
  push:
    branches:
      - main      # Production deployment
      - staging   # Staging deployment  
      - dev       # Development deployment
  pull_request:
    branches:
      - main
      - staging
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (dev, staging, production)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production

env:
  NODE_VERSION: '20'
  AZURE_WEBAPP_PACKAGE_PATH: './api'
  AZURE_STATIC_WEB_APPS_PACKAGE_PATH: './client'

jobs:
  # Generate semantic version
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version-tag: ${{ steps.version.outputs.version-tag }}
      changelog: ${{ steps.version.outputs.changelog }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version
        id: version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: "BREAKING CHANGE:"
          minor_pattern: "feat:"
          version_format: "${major}.${minor}.${patch}"
          change_path: "."
          namespace: ""
          bump_each_commit: false
          search_commit_body: true

  # Determine environment based on branch
  setup:
    needs: version
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      resource-group: ${{ steps.env.outputs.resource-group }}
      webapp-name: ${{ steps.env.outputs.webapp-name }}
      static-app-name: ${{ steps.env.outputs.static-app-name }}
      deploy-infrastructure: ${{ steps.env.outputs.deploy-infrastructure }}
      version: ${{ needs.version.outputs.version }}
      version-tag: ${{ needs.version.outputs.version-tag }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "resource-group=hr-onboarding-prod-rg" >> $GITHUB_OUTPUT
            echo "webapp-name=hr-onboarding-prod-api" >> $GITHUB_OUTPUT
            echo "static-app-name=hr-onboarding-prod-web" >> $GITHUB_OUTPUT
            echo "deploy-infrastructure=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "resource-group=hr-onboarding-staging-rg" >> $GITHUB_OUTPUT
            echo "webapp-name=hr-onboarding-staging-api" >> $GITHUB_OUTPUT
            echo "static-app-name=hr-onboarding-staging-web" >> $GITHUB_OUTPUT
            echo "deploy-infrastructure=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "resource-group=hr-onboarding-dev-rg" >> $GITHUB_OUTPUT
            echo "webapp-name=hr-onboarding-dev-r2x0-api" >> $GITHUB_OUTPUT
            echo "static-app-name=hr-onboarding-dev-r2x0-web" >> $GITHUB_OUTPUT
            echo "deploy-infrastructure=false" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "resource-group=hr-onboarding-dev-rg" >> $GITHUB_OUTPUT
            echo "webapp-name=hr-onboarding-dev-r2x0-api" >> $GITHUB_OUTPUT
            echo "static-app-name=hr-onboarding-dev-r2x0-web" >> $GITHUB_OUTPUT
            echo "deploy-infrastructure=false" >> $GITHUB_OUTPUT
          fi

  # Run tests
  test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install API dependencies
        run: npm install
        working-directory: ./api

      - name: Install Client dependencies
        run: npm install
        working-directory: ./client

      - name: Lint API code
        run: npm run lint
        working-directory: ./api

      - name: Lint Client code
        run: npm run lint
        working-directory: ./client

      - name: Check API formatting
        run: npm run format:check
        working-directory: ./api

      - name: Check Client formatting
        run: npm run format:check
        working-directory: ./client

      - name: Security audit API
        run: npm audit --audit-level=moderate
        working-directory: ./api

      - name: Security audit Client
        run: npm audit --audit-level=moderate
        working-directory: ./client

      - name: Run API tests
        run: npm test
        working-directory: ./api

      - name: Run Client tests
        run: npm test
        working-directory: ./client

      - name: Build Client
        run: npm run build
        working-directory: ./client

  # Deploy Infrastructure (only for main and staging)
  deploy-infrastructure:
    needs: [setup, test]
    runs-on: ubuntu-latest
    if: needs.setup.outputs.deploy-infrastructure == 'true'
    environment: 
      name: ${{ needs.setup.outputs.environment }}
      url: https://${{ needs.setup.outputs.webapp-name }}.azurewebsites.net
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan
        run: |
          terraform plan \
            -var-file="environments/${{ needs.setup.outputs.environment }}.tfvars" \
            -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}" \
            -out=tfplan
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform

      - name: Setup Application Insights
        run: |
          echo "🔍 Setting up Application Insights for ${{ needs.setup.outputs.environment }}"
          
          # Create Application Insights instance
          az monitor app-insights component create \
            --app hr-onboarding-${{ needs.setup.outputs.environment }}-insights \
            --location westeurope \
            --resource-group ${{ needs.setup.outputs.resource-group }} \
            --application-type web \
            --retention-time 90 \
            --kind web
          
          # Get instrumentation key
          INSTRUMENTATION_KEY=$(az monitor app-insights component show \
            --app hr-onboarding-${{ needs.setup.outputs.environment }}-insights \
            --resource-group ${{ needs.setup.outputs.resource-group }} \
            --query instrumentationKey -o tsv)
          
          # Configure API app service with Application Insights
          az webapp config appsettings set \
            --resource-group ${{ needs.setup.outputs.resource-group }} \
            --name ${{ needs.setup.outputs.webapp-name }} \
            --settings APPINSIGHTS_INSTRUMENTATIONKEY="$INSTRUMENTATION_KEY"
          
          echo "✅ Application Insights configured"

  # Deploy API
  deploy-api:
    needs: [setup, test]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: 
      name: ${{ needs.setup.outputs.environment }}
      url: https://${{ needs.setup.outputs.webapp-name }}.azurewebsites.net
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Create deployment package (without node_modules)
        run: |
          echo "📦 Creating lightweight deployment package"
          
          # Clean up any existing packages
          rm -f ../api-deployment.zip
          
          # Create production-ready package-lock.json
          echo "🔒 Creating production package-lock.json..."
          npm ci --only=production --ignore-scripts
          rm -rf node_modules
          
          # Create production .npmrc for Azure deployment
          echo "Creating production .npmrc for optimized Azure deployment..."
          cat > .npmrc << EOF
          # Production deployment optimizations  
          production=true
          omit=dev
          audit=false
          fund=false
          progress=false
          registry=https://registry.npmjs.org/
          cache=/tmp/npm-cache
          EOF
          
          echo "✅ Production .npmrc created"
          cat .npmrc
          
          # Create package without node_modules (Azure will install them)
          zip -r ../api-deployment.zip . \
            -x "node_modules/*" \
            -x "*.log" \
            -x ".env*" \
            -x "*.test.js" \
            -x "*.spec.js" \
            -x ".eslintrc.*" \
            -x ".prettierrc.*" \
            -x "nodemon.json"
          
          # Verify package size
          ls -lh ../api-deployment.zip
          echo "✅ Lightweight deployment package created (Azure will handle npm install)"
        working-directory: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      - name: Upload API artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hr-onboarding-api-${{ needs.setup.outputs.version }}
          path: ./api-deployment.zip
          retention-days: 30

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure Azure Web App for Node.js 20
        run: |
          echo "🔧 Configuring Azure Web App for Node.js 20 with Oryx fixes"
          
          # Step 1: Set runtime stack to Node.js 20-lts
          echo "📋 Setting Linux FX Version to Node.js 20-lts..."
          az webapp config set \
            --resource-group ${{ needs.setup.outputs.resource-group }} \
            --name ${{ needs.setup.outputs.webapp-name }} \
            --linux-fx-version "NODE|20-lts"
          
          # Step 2: Configure Node.js version and Oryx settings  
          echo "⚙️ Setting Node.js version and build configuration..."
          az webapp config appsettings set \
            --resource-group ${{ needs.setup.outputs.resource-group }} \
            --name ${{ needs.setup.outputs.webapp-name }} \
            --settings \
              WEBSITE_NODE_DEFAULT_VERSION="~20" \
              WEBSITE_NODEJS_DEFAULT_VERSION="~20" \
              NODE_VERSION="20" \
              ORYX_NODE_VERSION="20" \
              SCM_DO_BUILD_DURING_DEPLOYMENT="true" \
              ENABLE_ORYX_BUILD="true" \
              ORYX_PLATFORM_NAME="nodejs" \
              ORYX_PLATFORM_VERSION="20" \
              WEBSITES_ENABLE_APP_SERVICE_STORAGE="false" \
              WEBSITE_ENABLE_SYNC_UPDATE_SITE="true"
          
          # Step 3: Set application environment variables
          echo "🔧 Setting application environment variables..."
          az webapp config appsettings set \
            --resource-group ${{ needs.setup.outputs.resource-group }} \
            --name ${{ needs.setup.outputs.webapp-name }} \
            --settings \
              NODE_ENV="production" \
              PORT="8080" \
              DATABASE_SERVER="hr-onboarding-dev-r2x0-sql.database.windows.net" \
              DATABASE_NAME="hr-onboarding" \
              DATABASE_USERNAME="sqladmin" \
              DATABASE_TYPE="mssql" \
              DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}" \
              OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              OPENAI_API_ENDPOINT="https://api.openai.com/v1" \
              JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              JWT_EXPIRY="7d" \
              EMAIL_USERNAME="${{ secrets.EMAIL_USERNAME }}" \
              EMAIL_PASSWORD="${{ secrets.EMAIL_PASSWORD }}" \
              EMAIL_HOST="smtp.gmail.com" \
              EMAIL_PORT="587" \
              BCRYPT_SALT_ROUNDS="12"
          
          # Step 4: Set npm configuration for production builds
          echo "📦 Configuring npm for production deployment..."
          az webapp config appsettings set \
            --resource-group ${{ needs.setup.outputs.resource-group }} \
            --name ${{ needs.setup.outputs.webapp-name }} \
            --settings \
              NPM_CONFIG_PRODUCTION="true" \
              NPM_CONFIG_OMIT="dev" \
              NPM_CONFIG_FUND="false" \
              NPM_CONFIG_AUDIT="false" \
              NPM_CONFIG_PROGRESS="false" \
              NPM_CONFIG_CACHE="/tmp/npm-cache" \
              NPM_CONFIG_REGISTRY="https://registry.npmjs.org/"
          
          # Step 5: Set startup configuration
          echo "🚀 Setting startup configuration..."
          az webapp config set \
            --resource-group ${{ needs.setup.outputs.resource-group }} \
            --name ${{ needs.setup.outputs.webapp-name }} \
            --startup-file "node diagnostic-server.js"
          
          # Step 6: Enable diagnostic logging
          echo "🔍 Enabling diagnostic logging..."
          az webapp log config \
            --resource-group ${{ needs.setup.outputs.resource-group }} \
            --name ${{ needs.setup.outputs.webapp-name }} \
            --application-logging filesystem \
            --level verbose \
            --detailed-error-messages true \
            --failed-request-tracing true \
            --web-server-logging filesystem
          
          # Step 7: Clear any deployment cache and restart
          echo "🔄 Clearing cache and restarting app..."
          az webapp stop \
            --resource-group ${{ needs.setup.outputs.resource-group }} \
            --name ${{ needs.setup.outputs.webapp-name }}
          
          sleep 10
          
          az webapp start \
            --resource-group ${{ needs.setup.outputs.resource-group }} \
            --name ${{ needs.setup.outputs.webapp-name }}
          
          # Wait for configuration to apply
          sleep 20
          
          echo "✅ Azure Web App configured for Node.js 20"

      - name: Deploy to Azure Web App with retry logic
        run: |
          echo "🚀 Deploying to Azure Web App with enhanced error handling"
          
          # Deploy with retry logic for Oryx build stability
          for attempt in {1..3}; do
            echo "🔄 Deployment attempt $attempt/3"
            
            if timeout 300 az webapp deploy \
              --resource-group ${{ needs.setup.outputs.resource-group }} \
              --name ${{ needs.setup.outputs.webapp-name }} \
              --src-path ./api-deployment.zip \
              --type zip \
              --timeout 300; then
              echo "✅ Deployment completed successfully"
              break
            else
              echo "❌ Deployment attempt $attempt failed"
              
              if [[ $attempt -eq 3 ]]; then
                echo "🚨 All deployment attempts failed"
                echo "📋 Checking deployment logs..."
                az webapp log tail \
                  --resource-group ${{ needs.setup.outputs.resource-group }} \
                  --name ${{ needs.setup.outputs.webapp-name }} || true
                exit 1
              else
                echo "⏳ Waiting 60 seconds before retry..."
                # Clear deployment cache
                az webapp stop \
                  --resource-group ${{ needs.setup.outputs.resource-group }} \
                  --name ${{ needs.setup.outputs.webapp-name }} || true
                sleep 30
                az webapp start \
                  --resource-group ${{ needs.setup.outputs.resource-group }} \
                  --name ${{ needs.setup.outputs.webapp-name }} || true
                sleep 30
              fi
            fi
          done
          
          echo "✅ Azure Web App deployment completed"
      
      - name: Verify deployment health
        run: |
          echo "🔍 Waiting for Azure to install dependencies and start application..."
          sleep 30  # Reduced wait time since app is already working
          
          # Health check with retries (optimized timing)
          HEALTH_URL="https://${{ needs.setup.outputs.webapp-name }}.azurewebsites.net/health"
          
          for i in {1..6}; do
            echo "Health check attempt $i/6..."
            RESPONSE=$(curl -s -w "%{http_code}" --max-time 15 "$HEALTH_URL" 2>/dev/null || echo "000")
            HTTP_CODE="${RESPONSE: -3}"
            
            if [[ "$HTTP_CODE" == "200" ]]; then
              echo "✅ Application is healthy! (HTTP $HTTP_CODE)"
              # Extract JSON response (everything except last 3 chars which are HTTP code)
              JSON_RESPONSE="${RESPONSE%???}"
              echo "Response: $JSON_RESPONSE"
              break
            else
              echo "❌ Health check failed with HTTP code: $HTTP_CODE"
              if [ $i -eq 6 ]; then
                echo "🚨 Deployment health check failed after 6 attempts"
                echo "📋 Final check - trying direct curl..."
                curl -v --max-time 10 "$HEALTH_URL" || true
                echo "📋 Checking Azure logs for deployment issues..."
                az webapp log tail --name ${{ needs.setup.outputs.webapp-name }} --resource-group ${{ needs.setup.outputs.resource-group }} --lines 20 || true
                exit 1
              fi
              echo "⏳ Waiting 20 seconds before retry..."
              sleep 20
            fi
          done

  # Deploy Frontend
  deploy-frontend:
    needs: [setup, test]
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.setup.outputs.environment }}
      url: https://${{ needs.setup.outputs.static-app-name }}.azurewebsites.net
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install
        working-directory: ${{ env.AZURE_STATIC_WEB_APPS_PACKAGE_PATH }}

      - name: Build application
        run: npm run build
        working-directory: ${{ env.AZURE_STATIC_WEB_APPS_PACKAGE_PATH }}
        env:
          VITE_API_URL: https://${{ needs.setup.outputs.webapp-name }}.azurewebsites.net

      - name: Upload Client artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hr-onboarding-client-${{ needs.setup.outputs.version }}
          path: ${{ env.AZURE_STATIC_WEB_APPS_PACKAGE_PATH }}/dist/
          retention-days: 30

      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: 'upload'
          app_location: '/client'
          api_location: ''
          output_location: 'dist'

  # Health Check
  health-check:
    needs: [setup, deploy-api, deploy-frontend]
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.setup.outputs.environment }}
      url: https://${{ needs.setup.outputs.webapp-name }}.azurewebsites.net
    steps:
      - name: Wait for deployment and app startup
        run: sleep 60

      - name: Health check API
        run: |
          echo "Checking API health..."
          for i in {1..6}; do
            echo "Attempt $i/6"
            response=$(curl -s -o /dev/null -w "%{http_code}" \
              https://${{ needs.setup.outputs.webapp-name }}.azurewebsites.net/health || echo "000")
            echo "Status: $response"
            if [[ $response -eq 200 ]]; then
              echo "API health check passed"
              exit 0
            fi
            if [[ $i -lt 6 ]]; then
              echo "Waiting 30 seconds before retry..."
              sleep 30
            fi
          done
          echo "API health check failed after 6 attempts"
          echo "Last status: $response"
          # Get more info about the error
          curl -v https://${{ needs.setup.outputs.webapp-name }}.azurewebsites.net/health || true
          echo "ERROR: API health check failed - deployment failed"
          echo "Check Azure Portal logs for startup issues"
          exit 1

      - name: Azure Login for Frontend Check
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Health check Frontend
        run: |
          # Get the actual Static Web App URL
          STATIC_URL=$(az staticwebapp show --name ${{ needs.setup.outputs.static-app-name }} --resource-group ${{ needs.setup.outputs.resource-group }} --query "defaultHostname" -o tsv)
          echo "Checking Static Web App at: https://$STATIC_URL"
          response=$(curl -s -o /dev/null -w "%{http_code}" \
            https://$STATIC_URL || echo "000")
          if [[ $response -ne 200 ]]; then
            echo "Frontend health check failed with status: $response"
            echo "ERROR: Frontend deployment failed"
            exit 1
          fi
          echo "Frontend health check passed"

  # Trigger Blue-Green Deployment on Success
  trigger-blue-green:
    needs: [setup, health-check]
    runs-on: ubuntu-latest
    if: success()
    permissions:
      actions: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Trigger Blue-Green Deployment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('✅ Basic deployment completed successfully');
            console.log('🔵 Triggering blue-green deployment workflow...');
            
            const environment = '${{ github.ref }}' === 'refs/heads/main' ? 'production' :
                               '${{ github.ref }}' === 'refs/heads/staging' ? 'staging' : 'dev';
            
            try {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'deploy-blue-green.yml',
                ref: '${{ github.ref_name }}',
                inputs: {
                  environment: environment
                }
              });
              console.log(`🚀 Blue-green deployment triggered for environment: ${environment}`);
            } catch (error) {
              console.log(`❌ Failed to trigger blue-green deployment: ${error.message}`);
              throw error;
            }

  # Create GitHub Release (only for production)
  create-release:
    needs: [setup, health-check]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            # First release - get all commits
            CHANGELOG=$(git log --pretty=format:"- %s" --no-merges)
          else
            # Get commits since last tag
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --no-merges)
          fi
          
          # Save changelog to output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.setup.outputs.version-tag }}
          release_name: Release ${{ needs.setup.outputs.version }}
          body: |
            ## 🚀 Release ${{ needs.setup.outputs.version }}
            
            ### 📋 Changes
            ${{ steps.changelog.outputs.changelog }}
            
            ### 🔗 Deployment URLs
            - **API:** https://${{ needs.setup.outputs.webapp-name }}.azurewebsites.net
            - **Frontend:** [Production App](https://hr-onboarding-prod-web.azurewebsites.net)
            - **API Docs:** https://${{ needs.setup.outputs.webapp-name }}.azurewebsites.net/api-docs
            
            ### 📦 Artifacts
            - API Package: `hr-onboarding-api-${{ needs.setup.outputs.version }}`
            - Client Build: `hr-onboarding-client-${{ needs.setup.outputs.version }}`
            
            ---
            🤖 Generated with [Claude Code](https://claude.ai/code)
          draft: false
          prerelease: false